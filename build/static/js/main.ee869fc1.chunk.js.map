{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","robots.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","Cardlist","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAaeA,EAZF,SAACC,GAAW,IACjBC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACf,OACC,yBAAKC,UAAU,sDACf,yBAAKC,IAAI,kBAAkBC,IAAG,+BAA0BL,EAA1B,mBAC9B,6BACA,4BAAKC,GACL,2BAAIC,MCYSI,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACD,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCCJU,EAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,UACf,2BACAA,UAAU,sCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTCP,EACb,CACC,CACCP,GAAI,KACJC,KAAM,cACNC,MAAO,4BAER,CACCF,GAAI,KACJC,KAAM,qBACNC,MAAO,0BAER,CACCF,GAAI,MACJC,KAAM,aACNC,MAAO,mBAER,CACCF,GAAI,MACJC,KAAM,eACNC,MAAO,uBAER,CACCF,GAAI,MACJC,KAAM,kBACNC,MAAO,+BAER,CACCF,GAAI,MACJC,KAAM,WACNC,MAAO,qBAER,CACCF,GAAI,MACJC,KAAM,YACNC,MAAO,oBAER,CACCF,GAAI,MACJC,KAAM,gBACNC,MAAO,sBAER,CACCF,GAAI,MACJC,KAAM,oBACNC,MAAO,0BAER,CACCF,GAAI,MACJC,KAAM,UACNC,MAAO,qBCxCMgB,EARA,SAACnB,GACf,OACC,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEvB,EAAMwB,WCuCMC,G,wDApCd,aAAe,IAAD,8BACb,gBAWFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEd,YAAaa,EAAME,OAAOC,SAXzC,EAAKC,MAAQ,CACdvB,OAAQA,EACRM,YAAa,IAJC,E,gEAOM,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACpB,OAAO4B,S,+BAM9B,IAAD,EACuBC,KAAKN,MAA5BvB,EADA,EACAA,OAAOM,EADP,EACOA,YACRwB,EAAiB9B,EAAO+B,QAAO,SAAA/B,GACrC,OAAOA,EAAON,KAAKsC,cAAcC,SAAS3B,EAAY0B,kBAEvD,OAAIhC,EAAOkC,OAIV,yBAAKtC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcsB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAQ8B,MAPX,2C,GAvBSK,c,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ee869fc1.chunk.js","sourcesContent":["import React from 'react';\nconst Card = (props) => {\n\tconst {id,name,email} = props;\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw shadow-5'>\n\t\t<img alt='contains robots' src={`https://robohash.org/${id}?size=200x200`}/>\n\t\t<div>\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\n\t\t</div>\n\t\t</div>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\nconst Cardlist = ({ robots }) => {\n\treturn(\n<div>\n\t{\n\t\trobots.map((user, i) => {\n\t\treturn ( \n\t\t<Card \n\t\tkey={i} \n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\temail={robots[i].email}\n\t\t/>\n\t\t);\n\t})\n\t} \n</div>\n);\n}\nexport default Cardlist;","import React from 'react';\n\nconst Searchbox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2 tc'>\n\t\t<input \n\t\tclassName='pa3 tc ba b--green bg-lightest-blue'\n\t\ttype='search' \n\t\tplaceholder='search robots' \n\t\tonChange={searchChange}/>\n\t\t</div>\n\t\t);\n}\nexport default Searchbox;","export const robots = \n[\n\t{\n\t\tid: 5902,\n\t\tname: 'Cyber Thong',\n\t\temail: 'Cyber.Thong2020@sil.site'\n\t},\n\t{\n\t\tid: 4791,\n\t\tname: 'Capacitor Robotson',\n\t\temail: 'CapacitorR946@yahoo.in'\n\t},\n\t{\n\t\tid: 60328,\n\t\tname: 'Remote Ray',\n\t\temail: 'RRay28@sil.site'\n\t},\n\t{\n\t\tid: 89893,\n\t\tname: 'Tech Silicon',\n\t\temail: 'SillyTech@gmail.com'\n\t},\n\t{\n\t\tid: 23923,\n\t\tname: 'Alexa Logicgate',\n\t\temail: 'IamAlexaLogicgate@gmail.com'\n\t},\n\t{\n\t\tid: 89321,\n\t\tname: 'Wang Tin',\n\t\temail: 'TinWang@gmail.com'\n\t},\n\t{\n\t\tid: 10034,\n\t\tname: '0011 1010',\n\t\temail: 'AI98562@sil.site'\n\t},\n\t{\n\t\tid: 64456,\n\t\tname: 'Cloud Jettins',\n\t\temail: 'JetClouds@sil.site'\n\t},\n\t{\n\t\tid: 76056,\n\t\tname: 'Roblox Blockchain',\n\t\temail: 'Roblox14Block@yahoo.in'\n\t},\n\t{\n\t\tid: 86753,\n\t\tname: 'NaN 404',\n\t\temail: 'AI88000@sil.site'\n\t}\n]","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport Cardlist from './Cardlist';\nimport Searchbox from './Searchbox'\nimport {robots} from './robots';\nimport Scroll from './Scroll';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\trobots: robots,\n\tsearchfield: ''\n\t}\n}\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => {this.setState({robots:users})});\t\n}\nonSearchChange = (event) => {\n\tthis.setState({ searchfield: event.target.value })\n}\n\t\n\trender(){\n\t\tconst{ robots,searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robots =>{\n\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\n\t})\n\tif(!robots.length){\n\t\treturn <h1>Loading</h1>\n\t}else {\n\t\treturn (\n\t\t<div className='tc'>\n\t\t<h1 className='f1'>Robofriends</h1>\n\t\t<Searchbox searchChange={this.onSearchChange}/>\n\t\t<Scroll>\n\t\t<Cardlist robots={filteredRobots}/>\n\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t}\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}